name: Test and Release

# Run this job on all pushes and pull requests
# as well as tags with a semantic version
on:
  push:
    branches:
      - 'main'
    tags:
      # normal versions
      - 'v[0-9]+.[0-9]+.[0-9]+'
      # pre-releases
      - 'v[0-9]+.[0-9]+.[0-9]+-**'
  pull_request: {}

# Cancel previous PR/branch runs when a new commit is pushed
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      CONTROLLER_VERSION_MAX: ${{ steps.dotenv.outputs.CONTROLLER_VERSION_MAX }}
      CONTROLLER_VERSION_MIN: ${{ steps.dotenv.outputs.CONTROLLER_VERSION_MIN }}
      NODE_VERSION: ${{ steps.dotenv.outputs.NODE_VERSION }}
      NODE_VERSION_MIN: ${{ steps.dotenv.outputs.NODE_VERSION_MIN }}
      NODE_VERSION_MAX: ${{ steps.dotenv.outputs.NODE_VERSION_MAX }}
    steps:
      - name: Checkout to repository
        uses: actions/checkout@v3

      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Load environment vars
        id: dotenv
        uses: falti/dotenv-action@v1.0.4
        with:
          path: .github/workflows/env_vars.txt
          log-variables: true
          keys-case: bypass

  # Performs quick checks before the expensive test runs
  check_lint_unit-test:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: configure

    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ needs.configure.outputs.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.configure.outputs.NODE_VERSION }}

      - name: Install Dependencies
        shell: bash
        run: 'npm ci'

      - name: Perform a type check
        shell: bash
        run: 'npm run check'

      - name: Lint source code
        shell: bash
        run: 'npm run lint'

      - name: Test package files
        shell: bash
        run: npm run test:package

      - name: Unit tests and coverage check
        shell: bash
        run: npm run coverage

  # Runs adapter tests on all supported node versions and OSes
  adapter-integration-tests:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: configure

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node-version:
          ['${{ needs.configure.outputs.NODE_VERSION_MIN }}', '${{ needs.configure.outputs.NODE_VERSION_MAX }}']
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
        js-controller-version:
          [
            '${{ needs.configure.outputs.CONTROLLER_VERSION_MIN }}',
            '${{ needs.configure.outputs.CONTROLLER_VERSION_MAX }}',
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        shell: bash
        run: npm ci

      - name: Create a clean build
        shell: bash
        run: npm run build

      - name: Run integration tests
        shell: bash
        run: npm run test:integration -- --controller-version=${{ matrix.js-controller-version }}
        env:
          DEBUG: 'testing:*'
# TODO: To enable automatic npm releases, create a token on npmjs.org
# Enter this token as a GitHub secret (with name NPM_TOKEN) in the repository options
# Then uncomment the following block:

#  # Deploys the final package to NPM
#  deploy:
#    needs: [check_lint_unit-test, adapter-tests]
#
#    # Trigger this step only when a commit on any branch is tagged with a version number
#    if: |
#      contains(github.event.head_commit.message, '[skip ci]') == false &&
#      github.event_name == 'push' &&
#      startsWith(github.ref, 'refs/tags/v')
#
#    runs-on: ubuntu-latest
#
#    # Write permissions are required to create Github releases
#    permissions:
#      contents: write
#
#    steps:
#      - name: Check out the repository
#        uses: actions/checkout@v4
#
#      - name: Load environment vars
#        id: dotenv
#        uses: falti/dotenv-action@v1.0.4
#        with:
#          path: .github/workflows/env_vars.txt
#          log-variables: true
#
#      - uses: ioBroker/testing-action-deploy@v1
#        with:
#          node-version: ${{ steps.dotenv.outputs.NODE_VERSION }}
#          # Uncomment the following line if your adapter cannot be installed using 'npm ci'
#          # install-command: 'npm install'
#          build: true
#          npm-token: ${{ secrets.NPM_TOKEN }}
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#
#          # When using Sentry for error reporting, Sentry can be informed about new releases
#          # To enable create a API-Token in Sentry (User settings, API keys)
#          # Enter this token as a GitHub secret (with name SENTRY_AUTH_TOKEN) in the repository options
#          # Then uncomment and customize the following block:
#          sentry: true
#          sentry-token: ${{ secrets.SENTRY_AUTH_TOKEN }}
#          sentry-project: "iobroker-gjsm"
#          sentry-version-prefix: "iobroker.gjsm"
#          sentry-sourcemap-paths: "build/"
#          # If your sentry project is linked to a GitHub repository, you can enable the following option
#          # sentry-github-integration: true
