---
name: Code Testing

'on':
  pull_request:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - '*version.txt'
      - 'vscode/**'
      - 'docs/**'
      - '.github/**'
      - '!.github/**/*test*.yml'
      - '!.github/**/*env*.txt'
      # - "!.github/**/*release*.yml"
  schedule:
    - cron: '0 7 * * 5' # At 07 AM on Friday

# Cancel previous PR/branch runs when a new commit is pushed
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      CONTROLLER_VERSION_MAX: ${{ steps.dotenv.outputs.CONTROLLER_VERSION_MAX }}
      CONTROLLER_VERSION_MIN: ${{ steps.dotenv.outputs.CONTROLLER_VERSION_MIN }}
      NODE_VERSION: ${{ steps.dotenv.outputs.NODE_VERSION }}
      NODE_VERSION_MIN: ${{ steps.dotenv.outputs.NODE_VERSION_MIN }}
      NODE_VERSION_MAX: ${{ steps.dotenv.outputs.NODE_VERSION_MAX }}
    steps:
      - name: Checkout to repository
        uses: actions/checkout@v4

      - name: Load environment vars
        id: dotenv
        uses: falti/dotenv-action@v1.0.4
        with:
          path: .github/workflows/env_vars.txt
          log-variables: true
          keys-case: bypass

  # Performs quick checks before the expensive test runs
  check_lint_unit-test:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: configure

    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ needs.configure.outputs.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.configure.outputs.NODE_VERSION }}

      - name: Install Node Dependencies
        shell: bash
        run: 'npm ci'

      - name: Perform a type check
        shell: bash
        run: 'npm run check'

      - name: Lint source code
        shell: bash
        run: 'npm run lint'

      - name: Test package files
        shell: bash
        run: npm run test:package

      - name: Unit tests and coverage check
        shell: bash
        run: npm run coverage

      - name: Run maintenance checks
        shell: bash
        run: npm run maintenance

  # Runs adapter tests on all supported node versions and OSes
  adapter-integration-tests:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: [configure, check_lint_unit-test]

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node-version:
          ['${{ needs.configure.outputs.NODE_VERSION_MIN }}', '${{ needs.configure.outputs.NODE_VERSION_MAX }}']
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
        js-controller-version:
          [
            '${{ needs.configure.outputs.CONTROLLER_VERSION_MIN }}',
            '${{ needs.configure.outputs.CONTROLLER_VERSION_MAX }}',
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Node Dependencies
        shell: bash
        run: npm ci

      - name: Create a clean build
        shell: bash
        run: npm run build

      - name: Run integration tests
        shell: bash
        run: npm run test:integration -- --controller-version=${{ matrix.js-controller-version }}
        env:
          DEBUG: 'testing:*'

  # Runs adapter UI tests
  adapter-ui-tests:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: [configure, check_lint_unit-test]

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        browser: ['chrome']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ needs.configure.outputs.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.configure.outputs.NODE_VERSION }}

      - name: Install system packages
        shell: bash
        run: sudo apt install -y docker-compose

      - name: Install Node Dependencies
        shell: bash
        run: npm ci

      - name: Create a clean build
        shell: bash
        run: npm run build

      - name: Login to Docker Hub (via docker login command)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN_RO }}

      - name: Run ui tests
        shell: bash
        run: npm run test:ui
        env:
          BROWSER: ${{ matrix.browser }}
